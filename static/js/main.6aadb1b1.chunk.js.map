{"version":3,"sources":["components/board.js","tools.js","components/footer.js","App.js","reportWebVitals.js","index.js"],"names":["randomInt","min","max","Math","floor","random","randomCell","seed","not","GRID_SIZE","includes","DIRECTIONS","DIRECTION_VECTORS","0","dRow","dCol","1","2","3","OPPOSITE_DIRECTIONS","DIRECTION_ROTATIONS","Board","useState","Array","fill","map","row","board","snake","setSnake","food","setFood","score","setScore","dead","setDead","allowInput","useRef","direction","queueDirection","NaN","callback","delay","savedCallback","useEffect","current","id","setInterval","clearInterval","useInterval","moveSnake","window","addEventListener","e","handleKeydown","console","log","head","nextHead","nextHeadIndex","isNaN","die","newSnake","pop","length","handleDirQueue","inputDirection","key","preventDefault","handleDirInput","opposite","setTimeout","restart","headIndex","moveDirection","col","computeCellClass","index","computeCellStyle","transform","className","onClick","rowIndex","cell","colIndex","style","Footer","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6aadb1b1.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { useInterval } from \"../tools\";\r\n\r\nconst GRID_SIZE = 9;\r\nconst UPDATE_INTERVAL = 250;\r\nconst RESTART_WAIT = 1000;\r\n\r\nfunction randomInt(min, max) {\r\n  // generate random integer between min and max incl.\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst randomCell = (not = []) => {\r\n  let seed;\r\n  do {\r\n    seed = randomInt(0, GRID_SIZE * GRID_SIZE - 1);\r\n  } while (not.includes(seed));\r\n\r\n  return seed;\r\n};\r\n\r\nconst DIRECTIONS = {\r\n  up: 0,\r\n  right: 1,\r\n  down: 2,\r\n  left: 3,\r\n};\r\n\r\nconst DIRECTION_VECTORS = {\r\n  0: { dRow: -1, dCol: 0 },\r\n  1: { dRow: 0, dCol: 1 },\r\n  2: { dRow: 1, dCol: 0 },\r\n  3: { dRow: 0, dCol: -1 },\r\n};\r\n\r\nconst OPPOSITE_DIRECTIONS = {\r\n  0: DIRECTIONS.down,\r\n  1: DIRECTIONS.left,\r\n  2: DIRECTIONS.up,\r\n  3: DIRECTIONS.right,\r\n};\r\n\r\nconst DIRECTION_ROTATIONS = {\r\n  0: 0,\r\n  1: 90,\r\n  2: 180,\r\n  3: -90,\r\n};\r\n\r\nconst Board = () => {\r\n  const [board] = useState(\r\n    new Array(GRID_SIZE).fill(0).map((row) => new Array(GRID_SIZE).fill(0))\r\n  );\r\n  const [snake, setSnake] = useState([randomCell()]);\r\n  const [food, setFood] = useState(randomCell(snake));\r\n  const [score, setScore] = useState(0);\r\n\r\n  const [dead, setDead] = useState(false);\r\n\r\n  const allowInput = useRef(true);\r\n  const direction = useRef(randomInt(0, 3));\r\n  const queueDirection = useRef(NaN);\r\n\r\n\r\n  // update if still alive\r\n  useInterval(\r\n    () => {\r\n      moveSnake();\r\n    },\r\n    dead ? null : UPDATE_INTERVAL\r\n  );\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      handleKeydown(e);\r\n    });\r\n  }, []);\r\n\r\n  const moveSnake = () => {\r\n    console.log(\"Moving Snake\");\r\n\r\n    allowInput.current = true;\r\n\r\n    // calculate next head position\r\n    let head = snake[0];\r\n    let nextHead = nextHeadIndex(head, direction.current);\r\n\r\n    if (isNaN(nextHead)) {\r\n      // out of bounds\r\n      return die();\r\n    }\r\n\r\n    // add next position\r\n    let newSnake = [nextHead, ...snake];\r\n\r\n    if (nextHead === food) {\r\n      // landing on food\r\n      console.log(\"EAT!\");\r\n      setFood(randomCell(newSnake));\r\n    } else {\r\n      // no food: remove final element\r\n      newSnake.pop();\r\n    }\r\n\r\n    // if on self\r\n    if (snake.includes(nextHead)) {\r\n      return die();\r\n    }\r\n\r\n    // update snake\r\n\r\n    setSnake(newSnake);\r\n\r\n    // update score\r\n    setScore((newSnake.length - 1) * 10);\r\n\r\n    handleDirQueue();\r\n  };\r\n\r\n  const handleKeydown = (e) => {\r\n    let inputDirection;\r\n\r\n    switch (e.key) {\r\n      case \"ArrowRight\":\r\n      case \"d\":\r\n        inputDirection = DIRECTIONS.right;\r\n        break;\r\n      case \"ArrowLeft\":\r\n      case \"a\":\r\n        inputDirection = DIRECTIONS.left;\r\n        break;\r\n      case \"ArrowUp\":\r\n      case \"w\":\r\n        inputDirection = DIRECTIONS.up;\r\n        break;\r\n      case \"ArrowDown\":\r\n      case \"s\":\r\n        inputDirection = DIRECTIONS.down;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n\te.preventDefault();\r\n\r\n    if (!allowInput.current) {\r\n      queueDirection.current = inputDirection;\r\n      return;\r\n    }\r\n\r\n    handleDirInput(inputDirection);\r\n  };\r\n\r\n  const handleDirInput = (inputDirection) => {\r\n    let opposite = OPPOSITE_DIRECTIONS[direction.current];\r\n    if (direction.current === inputDirection || opposite === inputDirection) {\r\n      return;\r\n    }\r\n\r\n    direction.current = inputDirection;\r\n    allowInput.current = false;\r\n  };\r\n  const handleDirQueue = () => {\r\n    if (isNaN(queueDirection.current)) {\r\n      return;\r\n    }\r\n\r\n    handleDirInput(queueDirection.current);\r\n    queueDirection.current = NaN;\r\n  };\r\n\r\n  const die = () => {\r\n    setDead(true);\r\n    setTimeout(restart, RESTART_WAIT);\r\n    queueDirection.current = NaN;\r\n  };\r\n  const restart = () => {\r\n    let newSnake = [randomCell()];\r\n    setSnake(newSnake);\r\n    setFood(randomCell(newSnake));\r\n\r\n    setScore(0);\r\n    direction.current = randomInt(0, 3);\r\n\r\n    setDead(false);\r\n  };\r\n\r\n  const nextHeadIndex = (headIndex, moveDirection) => {\r\n    let row = Math.floor(headIndex / GRID_SIZE);\r\n    let col = headIndex % GRID_SIZE;\r\n\r\n    const { dRow, dCol } = DIRECTION_VECTORS[moveDirection];\r\n\r\n    row += dRow;\r\n    col += dCol;\r\n\r\n    if (row < 0 || row >= GRID_SIZE || col < 0 || col >= GRID_SIZE) {\r\n      return NaN;\r\n    }\r\n\r\n    return row * GRID_SIZE + col;\r\n  };\r\n\r\n  const computeCellClass = (row, col) => {\r\n    let index = row * GRID_SIZE + col;\r\n\r\n    return food === index\r\n      ? \"food\" // food\r\n      : !snake.includes(index)\r\n      ? \"\" // not snake (or food)\r\n      : index !== snake[0]\r\n      ? \"snake-body\" // not head\r\n      : dead\r\n      ? \"snake-dead\" // dead head\r\n      : \"snake-head\"; // normal head\r\n  };\r\n\r\n  const computeCellStyle = (row, col) => {\r\n    let index = row * GRID_SIZE + col;\r\n\r\n    if (index !== snake[0]) {\r\n      // not head\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      transform: `rotate(${DIRECTION_ROTATIONS[direction.current]}deg)`,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\" onClick={moveSnake}>\r\n      <h1>Score: {score}</h1>\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, colIndex) => (\r\n            <div\r\n              key={colIndex}\r\n              className={`cell ${computeCellClass(rowIndex, colIndex)}`}\r\n              style={computeCellStyle(rowIndex, colIndex)}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","\r\nimport {useRef, useEffect} from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }","\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            Created using React by Tom Wright &copy; 2021. <a href=\"http://www.github.com/tomnwright/React-Snake\">Github Repo</a>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import \"./App.css\";\r\nimport Board from \"./components/board\"\r\nimport Footer from \"./components/footer\"\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <div className=\"App\">\r\n      <Board />\r\n      <p>Use the arrow keys to move the snake.</p>\r\n    </div>\r\n    <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}